#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#include <time.h>
#include "mylib.h"
#include "htable.h"

void helpMessage() {
    printf("Usage: ./asgn [OPTION]... <STDIN>\n\n");
    printf("Perform various operations using a hash table. By default word are\n");
    printf("read from stdin and added to the hash table, before being printed out\n");
    printf("alongside their frequencies to stdout.\n\n");

    printf("-c FILENAME  Check spelling of words in FILENAME using words\n");
    printf("\t     from stdin as dictionary. Print unknown words to\n");
    printf("\t     stdout, timing info & count to stderr (ignore -p)\n");
    printf("-d \t     Use double hasing (linear probing is the default)\n");
    printf("-e \t     Display entire contents of hash table on stderr\n");
    printf("-p \t     Print stats info instead of frequencies & words\n");
    printf("-s SNAPSHOTS Show SNAPSHOTS stats snapshots (if -p is used)\n");
    printf("-t TABLESIZE Use the first prime >= TABLESIZE as htable size\n\n");
    printf("-h \t     Display this message\n");
}

static void print_info(int freq, char *word){
    printf("%-4d %s\n", freq, word);
}

int main(int argc, char **argv) {
    int size = 113;
    hashing_t type = LINEAR_P;
    htable h;
    const char *optstring = "c:deps:t:h";
    char option;
    char word[256];
    
    clock_t start, stop;
    double searchTime;
    double fillTime;
    
    FILE *infile = NULL;
    int spellCheck = 0;
    int printTable = 0;
    int printStats = 0;
    int snapshot = 0;

    int unknown = 0;
    int max_snap = 0;
    

    while ((option = getopt(argc, argv, optstring)) != EOF) {
        switch (option) {
            /** Spell check */ 
            case 'c':
                if (NULL == (infile = fopen(optarg, "r"))) {
                    fprintf(stderr, "%s: can't find file %s\n", argv[0],argv[1]);
                    return EXIT_FAILURE;
                }
                spellCheck = 1;
                break;
            case 'd':
                type = DOUBLE_H;
                break;
            case 'e':
                printTable = 1;
                break;
            case 'p':
                if(spellCheck == 0){
                printStats = 1;
                }
                break;
            case 's':
                if(printStats == 1){
                    snapshot = 1;
                }
                break;
            case 't':
                /* use the first prime >= tablesize as the size of table*/
                break;
            case 'h':
                /* help message*/
                helpMessage();
                break;
            default:
                /* help message */
                helpMessage();
                break;
        }
    }
    h = htable_new(size, type);

    start = clock();
    while (getword(word, sizeof word, infile) != EOF) {
        htable_insert(h, word);
    }

    stop = clock();
    fillTime = ((stop - start)/(double)CLOCKS_PER_SEC);


    if (printTable == 1) {
        htable_print_entire_table(h);
    }
        
    if (spellCheck == 1) {
        start = clock();
        while (getword(word, sizeof word, infile) != EOF) {
            if (htable_search(h, word) == 0) {
                printf("%s\n", word);
                unknown++;
            }
        }
        stop = clock();
        searchTime = ((stop-start)/(double)CLOCKS_PER_SEC);
        fprintf(stderr, "Fill time: %2.6f\n", fillTime);
        fprintf(stderr, "Search time: %2.6f\n", searchTime);
        fprintf(stderr, "Unknown words: %d\n", unknown);
    } else if (printStats == 1) {
        if(max_snap > 0){
            htable_print_stats(h, infile, max_snap);
        }
    }
        

    if(snapshot == 1){
        max_snap = atoi(optarg);
    }
}
                
